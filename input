N = {}

local function centroid(mat)							-- centroid function
	local k = torch.Tensor(mat:size(1),mat:size(2))
	for i=1,mat:size(1) do
		k[i]:fill(i)
		end
	local a = torch.cmul(k,mat)
	local X = torch.floor(torch.sum(a) / torch.sum(mat))
	k = k:transpose(1,2)
	for i=1,mat:size(2) do
		k[i]:fill(i)
		end
	k = k:transpose(1,2)
	local a = torch.cmul(k,mat)
	local Y = torch.floor(torch.sum(a) / torch.sum(mat))
	return X,Y
	end

local function segment(img,newc)						-- segment function segments a given line image 'img',
	local flag1 = 0								-- crops individual letters and processes it
	local flag2 = 0
	local colscan = 5
	local rowscan = 5
	local t = {}
	local count = 1
	local avg_gap=0
	local gap
	local last_end=0
	local colmax = {}
	local vdim = img:size(1)
	local hdim = img:size(2)

	for i=1,hdim do								-- stores maximum pixel value of each column in colmax[]
		colmax[i] = torch.max(img[{{},i}])
		end

	while(colscan<hdim) do
        ::sos::

		for j=colscan,hdim do						-- finds c1
			if(j>=hdim-20) then flag1=1 break end
			if(colmax[j]>1.3*colmax[j-3]) then
				c1 = j-2
				break
				end
		end
		
		if(flag1==1) then flag1 = 0 break end
		
		for j=c1+1,hdim do						-- finds c2
			colscan=j
			if(colmax[j]<0.7*colmax[j-3]) then
				if(j==hdim-1) then c2=j else c2 = j+2 end
				break
				end
		end
        	
        	rowscan = 4

		while(rowscan<vdim) do
			local rowmax = {}
			for i=1,vdim do						-- stores maximum pixel value of each row from c1 to c2 in rowmax[]
				rowmax[i] = torch.max(img[{i,{c1,c2}}])
				end

			for i=rowscan,vdim do					-- finds r1
				if(i==vdim-20) then flag2=1 break end
				if(rowmax[i]>1.5*rowmax[i-3]) then
					if(i==1) then r1=i else r1 = i-2 end
					break
					end
				end
			
			if(flag2==1) then flag2 = 0 break end

			for i=r1+1,vdim do					-- finds r2
		    		rowscan = i
				if(rowmax[i]<0.6*rowmax[i-3]) then
					if(i==vdim-1) then r2=i else r2 = i+2 end
					break
					end
				end

                	if((r2-r1)/vdim>0.1) then break end
		end

		a = {c1-1,r1-1,c2-1,r2-1}			
        	if((c2-c1)*(r2-r1)/(hdim*vdim)<0.001) then goto sos end
		t[count] = a

		if(count~=1) then						-- detecting spaces
			gap = c1 - last_end
			if (gap > 2.7 * avg_gap) then
				t[count] = 0
				t[count+1]=a
				count=count+1
			else	
				avg_gap = (gap + avg_gap * count)/(count +1)
				end
		else 
			avg_gap=(c2-c1)/4		
			end

		last_end = c2 
		count = count +1
		end
	
	
	local mat = {}
		for q = 1,count-1 do						-- edits red image
		if(t[q]==0) then mat[q]=0 
		else 
			for l = t[q][1],t[q][3] do
				for m = -1,0 do
					red[1][t[q][2]+m+newc][l] = 1
					for n = 2,3 do
						red[n][t[q][2]+m+newc][l] = 0
						end
					end
				for m = 0,1 do
					red[1][t[q][4]+m+newc][l] = 1
					for n = 2,3 do
						red[n][t[q][4]+m+newc][l] = 0
						end
					end
				end
			for l = t[q][2],t[q][4] do
				for m = -1,0 do
					red[1][l+newc][t[q][1]+m] = 1
					for n = 2,3 do
						red[n][l+newc][t[q][1]+m] = 0
						end
					end
				for m = 1,2 do
					red[1][l+newc][t[q][3]+m] = 1
					for n = 2,3 do
						red[n][l+newc][t[q][3]+m] = 0
						end
					end
		end

		im = image.crop(img,t[q][1],t[q][2],t[q][3],t[q][4])
		min = torch.min(im)
		max = torch.max(im)
		im = (im - min)*(255/(max - min))
		im = image.scale(im,20,20,simple)
		X,Y = centroid(im)
		local c=1
		s = im:storage()
		x = 15 -X
		y = 15-Y
		f = torch.Tensor(28,28):fill(0)
		for p=x,x+19 do
			for q=y,y+19 do
				f[p][q] = s[c]
				if (s[c]<80 ) then f[p][q]=0 elseif (s[c]<200) then f[p][q] = f[p][q] + 40 end
				c = c+1
				end
			end


			g = torch.Tensor(28,28):fill(0)
			for a=3,26 do						-- increases thickness of image
				for b=3,26 do
					if f[a][b]>160 then
						for c=-1,1 do
							for d=-1,1 do
								g[a+c][b+d] = 255
							end
						end
					elseif f[a][b]>130 then
						g[a][b] = 255
						g[a-1][b] = 255
						g[a+1][b] = 255
						g[a][b-1] = 255
						g[a][b+1] = 255
						end
					end
				end
				mat[q] = g
			end	
		end
		return mat
	end


function N.f(i)									-- figuring out function
	red = image.load(i,3,'double')						-- load RGB image
	local l = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'o', 1, 2, 3, 4, 's', 6, 7, 8, 9 }

	img = image.load(i,1,'double')						-- load black and white image
	img = 255 - (255 * img)							-- normalization technique
	local fans = ""								-- line distribution
	local linmax = {}
	local l1 = 0
	local l2 = 0
	local lincount=1
	local lines = {}
	local crop_lines = {}
	local scan = 4
	local flag=0
	local vdim = img:size(1)
	local hdim = img:size(2)

	for i=1,vdim do								-- stores maximum pixel value of each row from in rowmax[]
		linmax[i] = torch.max(img[{i,{}}])
		end
	while(scan < vdim) do
        ::lol::
		for j=scan,vdim do						-- finds l1
			if(j>=vdim-10) then flag=1 break end
			if(linmax[j]>1.4*linmax[j-3]) then				
				l1 = j-2
				break
				end
			end

		if(flag==1) then flag = 0 break end 

		for j=l1+1,vdim do						-- finds l2
			  scan=j
			if(linmax[j]<0.75*linmax[j-3]) then
				if(j>=vdim-2) then l2=j else l2 = j+2 end
				break
				end
			end

		if (l2-l1)/vdim<0.02 then goto lol end
		lines[lincount] = {l1,l2}
		lincount = lincount+1	
	end
	
	local llines = #lines
	if(llines == 1) then crop_lines[1]=img
	else
		crop_lines[1] = image.crop(img,2,2,hdim-1,torch.floor((lines[1][2]+lines[2][1])/2))
		for i=2,llines-1 do
			crop_lines[i] = image.crop(img,2,(lines[i-1][2]+lines[i][1])/2,hdim-1,(lines[i][2]+lines[i+1][1])/2)
		end
		crop_lines[llines] = image.crop(img,2,torch.floor((lines[llines-1][2]+lines[llines][1])/2),hdim,vdim)
	end

	for cn=1,llines do							-- processing each line
		local words={}
		local cwords={}
		local word_count=1
		local mat = {}		

		if(cn==1) then
		mat = segment(crop_lines[cn],0)
		else
		mat = segment(crop_lines[cn],torch.floor((lines[cn-1][2]+lines[cn][1])/2))
		end
		
		local str = ""

		for i=1,#mat do
			if(mat[i]==0) then 
				words[word_count]=str
				word_count = word_count + 1
				str = ""
			else
				itorch.image(mat[i])
	       			_ , out = torch.max(model:forward(mat[i]),1)
				str = str..l[out[1]]
				end	
			end

		words[word_count] = str
		local csent=""
		for i,val in ipairs(words) do
			csent = csent..speller.correct(val).." "
			end
		fans = fans.."\n"..csent
		end
		print("OUTPUT: "..fans)
	end

 return N
